Description: Deploy a high-availability web app using CloudFormation -
  Application Team Template
# CloudFormation Template for Auto Scaling Group with Launch Template.


Parameters:
  # Add your parameters here
  EnvironmentName:
    Description: An environment name that will be prefixed.
    Type: String

  KeyPairName:
    Type: String
    Description: Name of Key Pair.

  S3BucketName:
    Type: String
    Description: S3 bucket that stores the static assets.

Resources:
  # Launch Template for EC2 instances
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-005fc0f236362e99f # latest Ubuntu 22 AMI
        KeyName: !Ref KeyPairName # or just the key pair name
        SecurityGroupIds:
        - !Ref WebServerSecGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            sudo apt-get update -y
            sudo apt-get install nginx -y
            sudo service nginx start

            # this creates a new file named index.html in the /var/www/html directory and writes the opening <html> tag to it.
            echo "<html>" > /var/www/html/index.html

            # this appends a <head> section to the index.html file, including a <title> tag that sets the title of the web page to "Welcome to My Web App".
            # the '>>' operator means that the content is added to the end of the file without overwriting it.
            echo "<head><title>Welcome to My Web App</title></head>" >> /var/www/html/index.html

            # This appends a <body> section to the index.html file, which contains an <h1> header with the text "It works! Udagram".
            echo "<body><h1>It works! Udagram</h1></body>" >> /var/www/html/index.html

            # This appends the closing </html> tag to the index.html file, completing the HTML document.
            echo "</html>" >> /var/www/html/index.html

            # Start a web server (e.g., Apache)
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd

        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
        IamInstanceProfile:
          Name: !Ref WebAppInstanceProfile

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 #allow all inbound traffic on port 80

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http access to our hosts from the LB Security Group
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-vpc-id"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref LBSecGroup
      SecurityGroupEgress:
      - IpProtocol: -1 # -1 means all traffic
        FromPort: 0
        ToPort: 0
        CidrIp: 0.0.0.0/0 # Allow all outbound traffic

  WebAppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EnvironmentName}-web-servers"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
      - PolicyName: web-servers-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            Resource:
            - !Sub "arn:aws:s3:::s3://${S3BucketName}/*"
      # For Amazon SSM access
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref WebAppInstanceRole

  # Auto Scaling Group
  WebAppASGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-private-subnets"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '2'
      DesiredCapacity: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-public-subnet1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-public-subnet2"
      SecurityGroups:
      - Ref: LBSecGroup
      Scheme: internet-facing

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  AppLBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [ / ]
      ListenerArn: !Ref Listener
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-vpc-id"

  # S3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

# ------------

Outputs:

  LoadBalancerURL:
    Description: "The LoadBalancer's DNS"
    Value: !Sub "http://${WebAppLB.DNSName}"
    Export:
      Name: !Sub "${EnvironmentName}-LoadBalancerURL"
